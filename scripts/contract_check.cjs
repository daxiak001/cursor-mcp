const fs=require('fs');const path=require('path');function main(){const schemaPath='接口/contract.schema.json';if(!fs.existsSync(schemaPath)){console.log('no schema, skip');process.exit(0);}const schema=JSON.parse(fs.readFileSync(schemaPath,'utf8'));const result=[];for(const mod of (schema.modules||[])){const p=path.resolve(mod.file);let ok=true;try{const txt=fs.readFileSync(p,'utf8');for(const exp of (mod.exports||[])){const name=exp.replace(/\(.*\)/,'');const re=new RegExp(\\bexport\\s+(function|const|let|var|class)\\s+\\b);if(!re.test(txt)){result.push({module:mod.name,file:mod.file,missing:exp});ok=false;}}}catch{result.push({module:mod.name,file:mod.file,error:'read-failed'});ok=false;} }if(!fs.existsSync('reports'))fs.mkdirSync('reports',{recursive:true});fs.writeFileSync('reports/contract-check.json',JSON.stringify(result,null,2),'utf8');const md=['# Contract Check',''];for(const r of result){if(r.missing)md.push(-  |  | missing: );else if(r.error)md.push(-  |  | error: );}fs.writeFileSync('reports/contract-check.md',md.join('\n'),'utf8');console.log('contract check done');}if(require.main===module)main();
